Index: flat-service/mvnw.cmd
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/mvnw.cmd b/flat-service/mvnw.cmd
new file mode 100644
--- /dev/null	(date 1714650035813)
+++ b/flat-service/mvnw.cmd	(date 1714650035813)
@@ -0,0 +1,205 @@
+@REM ----------------------------------------------------------------------------
+@REM Licensed to the Apache Software Foundation (ASF) under one
+@REM or more contributor license agreements.  See the NOTICE file
+@REM distributed with this work for additional information
+@REM regarding copyright ownership.  The ASF licenses this file
+@REM to you under the Apache License, Version 2.0 (the
+@REM "License"); you may not use this file except in compliance
+@REM with the License.  You may obtain a copy of the License at
+@REM
+@REM    https://www.apache.org/licenses/LICENSE-2.0
+@REM
+@REM Unless required by applicable law or agreed to in writing,
+@REM software distributed under the License is distributed on an
+@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+@REM KIND, either express or implied.  See the License for the
+@REM specific language governing permissions and limitations
+@REM under the License.
+@REM ----------------------------------------------------------------------------
+
+@REM ----------------------------------------------------------------------------
+@REM Apache Maven Wrapper startup batch script, version 3.2.0
+@REM
+@REM Required ENV vars:
+@REM JAVA_HOME - location of a JDK home dir
+@REM
+@REM Optional ENV vars
+@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
+@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
+@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
+@REM     e.g. to debug Maven itself, use
+@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
+@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
+@REM ----------------------------------------------------------------------------
+
+@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
+@echo off
+@REM set title of command window
+title %0
+@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
+@if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%
+
+@REM set %HOME% to equivalent of $HOME
+if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")
+
+@REM Execute a user defined script before this one
+if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
+@REM check for pre script, once with legacy .bat ending and once with .cmd ending
+if exist "%USERPROFILE%\mavenrc_pre.bat" call "%USERPROFILE%\mavenrc_pre.bat" %*
+if exist "%USERPROFILE%\mavenrc_pre.cmd" call "%USERPROFILE%\mavenrc_pre.cmd" %*
+:skipRcPre
+
+@setlocal
+
+set ERROR_CODE=0
+
+@REM To isolate internal variables from possible post scripts, we use another setlocal
+@setlocal
+
+@REM ==== START VALIDATION ====
+if not "%JAVA_HOME%" == "" goto OkJHome
+
+echo.
+echo Error: JAVA_HOME not found in your environment. >&2
+echo Please set the JAVA_HOME variable in your environment to match the >&2
+echo location of your Java installation. >&2
+echo.
+goto error
+
+:OkJHome
+if exist "%JAVA_HOME%\bin\java.exe" goto init
+
+echo.
+echo Error: JAVA_HOME is set to an invalid directory. >&2
+echo JAVA_HOME = "%JAVA_HOME%" >&2
+echo Please set the JAVA_HOME variable in your environment to match the >&2
+echo location of your Java installation. >&2
+echo.
+goto error
+
+@REM ==== END VALIDATION ====
+
+:init
+
+@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
+@REM Fallback to current working directory if not found.
+
+set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
+IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir
+
+set EXEC_DIR=%CD%
+set WDIR=%EXEC_DIR%
+:findBaseDir
+IF EXIST "%WDIR%"\.mvn goto baseDirFound
+cd ..
+IF "%WDIR%"=="%CD%" goto baseDirNotFound
+set WDIR=%CD%
+goto findBaseDir
+
+:baseDirFound
+set MAVEN_PROJECTBASEDIR=%WDIR%
+cd "%EXEC_DIR%"
+goto endDetectBaseDir
+
+:baseDirNotFound
+set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
+cd "%EXEC_DIR%"
+
+:endDetectBaseDir
+
+IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config" goto endReadAdditionalConfig
+
+@setlocal EnableExtensions EnableDelayedExpansion
+for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
+@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%
+
+:endReadAdditionalConfig
+
+SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"
+set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
+set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
+
+set WRAPPER_URL="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar"
+
+FOR /F "usebackq tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
+    IF "%%A"=="wrapperUrl" SET WRAPPER_URL=%%B
+)
+
+@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
+@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
+if exist %WRAPPER_JAR% (
+    if "%MVNW_VERBOSE%" == "true" (
+        echo Found %WRAPPER_JAR%
+    )
+) else (
+    if not "%MVNW_REPOURL%" == "" (
+        SET WRAPPER_URL="%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar"
+    )
+    if "%MVNW_VERBOSE%" == "true" (
+        echo Couldn't find %WRAPPER_JAR%, downloading it ...
+        echo Downloading from: %WRAPPER_URL%
+    )
+
+    powershell -Command "&{"^
+		"$webclient = new-object System.Net.WebClient;"^
+		"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {"^
+		"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');"^
+		"}"^
+		"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%WRAPPER_URL%', '%WRAPPER_JAR%')"^
+		"}"
+    if "%MVNW_VERBOSE%" == "true" (
+        echo Finished downloading %WRAPPER_JAR%
+    )
+)
+@REM End of extension
+
+@REM If specified, validate the SHA-256 sum of the Maven wrapper jar file
+SET WRAPPER_SHA_256_SUM=""
+FOR /F "usebackq tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
+    IF "%%A"=="wrapperSha256Sum" SET WRAPPER_SHA_256_SUM=%%B
+)
+IF NOT %WRAPPER_SHA_256_SUM%=="" (
+    powershell -Command "&{"^
+       "$hash = (Get-FileHash \"%WRAPPER_JAR%\" -Algorithm SHA256).Hash.ToLower();"^
+       "If('%WRAPPER_SHA_256_SUM%' -ne $hash){"^
+       "  Write-Output 'Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised.';"^
+       "  Write-Output 'Investigate or delete %WRAPPER_JAR% to attempt a clean download.';"^
+       "  Write-Output 'If you updated your Maven version, you need to update the specified wrapperSha256Sum property.';"^
+       "  exit 1;"^
+       "}"^
+       "}"
+    if ERRORLEVEL 1 goto error
+)
+
+@REM Provide a "standardized" way to retrieve the CLI args that will
+@REM work with both Windows and non-Windows executions.
+set MAVEN_CMD_LINE_ARGS=%*
+
+%MAVEN_JAVA_EXE% ^
+  %JVM_CONFIG_MAVEN_PROPS% ^
+  %MAVEN_OPTS% ^
+  %MAVEN_DEBUG_OPTS% ^
+  -classpath %WRAPPER_JAR% ^
+  "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" ^
+  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
+if ERRORLEVEL 1 goto error
+goto end
+
+:error
+set ERROR_CODE=1
+
+:end
+@endlocal & set ERROR_CODE=%ERROR_CODE%
+
+if not "%MAVEN_SKIP_RC%"=="" goto skipRcPost
+@REM check for post script, once with legacy .bat ending and once with .cmd ending
+if exist "%USERPROFILE%\mavenrc_post.bat" call "%USERPROFILE%\mavenrc_post.bat"
+if exist "%USERPROFILE%\mavenrc_post.cmd" call "%USERPROFILE%\mavenrc_post.cmd"
+:skipRcPost
+
+@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
+if "%MAVEN_BATCH_PAUSE%"=="on" pause
+
+if "%MAVEN_TERMINATE_CMD%"=="on" exit %ERROR_CODE%
+
+cmd /C exit /B %ERROR_CODE%
Index: flat-service/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/.gitignore b/flat-service/.gitignore
new file mode 100644
--- /dev/null	(date 1714650035810)
+++ b/flat-service/.gitignore	(date 1714650035810)
@@ -0,0 +1,33 @@
+HELP.md
+target/
+!.mvn/wrapper/maven-wrapper.jar
+!**/src/main/**/target/
+!**/src/test/**/target/
+
+### STS ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+
+### IntelliJ IDEA ###
+.idea
+*.iws
+*.iml
+*.ipr
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+build/
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### VS Code ###
+.vscode/
Index: flat-service/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/pom.xml b/flat-service/pom.xml
new file mode 100644
--- /dev/null	(date 1714650035813)
+++ b/flat-service/pom.xml	(date 1714650035813)
@@ -0,0 +1,102 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+	<parent>
+		<groupId>org.springframework.boot</groupId>
+		<artifactId>spring-boot-starter-parent</artifactId>
+		<version>3.2.5</version>
+		<relativePath/> <!-- lookup parent from repository -->
+	</parent>
+	<groupId>com.micasa</groupId>
+	<artifactId>flat-service</artifactId>
+	<version>0.0.1-SNAPSHOT</version>
+	<name>flat-service</name>
+	<description>flat-service</description>
+	<properties>
+		<java.version>17</java.version>
+		<lombok.version>1.18.32</lombok.version>
+		<mapstruct.version>1.5.5.Final</mapstruct.version>
+		<maven.compiler.plugin.version>3.13.0</maven.compiler.plugin.version>
+		<lombok.mapstruct.bind.version>0.2.0</lombok.mapstruct.bind.version>
+	</properties>
+	<dependencies>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-data-jpa</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-validation</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-web</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-devtools</artifactId>
+			<scope>runtime</scope>
+			<optional>true</optional>
+		</dependency>
+		<dependency>
+			<groupId>com.mysql</groupId>
+			<artifactId>mysql-connector-j</artifactId>
+			<scope>runtime</scope>
+		</dependency>
+		<!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
+		<dependency>
+			<groupId>org.projectlombok</groupId>
+			<artifactId>lombok</artifactId>
+			<version>${lombok.version}</version>
+			<scope>provided</scope>
+		</dependency>
+		<!-- https://mvnrepository.com/artifact/org.mapstruct/mapstruct -->
+		<dependency>
+			<groupId>org.mapstruct</groupId>
+			<artifactId>mapstruct</artifactId>
+			<version>${mapstruct.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-test</artifactId>
+			<scope>test</scope>
+		</dependency>
+	</dependencies>
+
+	<build>
+		<plugins>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-compiler-plugin</artifactId>
+				<version>${maven.compiler.plugin.version}</version>
+				<configuration>
+					<annotationProcessorPaths>
+						<path>
+							<groupId>org.mapstruct</groupId>
+							<artifactId>mapstruct-processor</artifactId>
+							<version>${mapstruct.version}</version>
+						</path>
+						<path>
+							<groupId>org.projectlombok</groupId>
+							<artifactId>lombok</artifactId>
+							<version>${lombok.version}</version>
+						</path>
+						<dependency>
+							<groupId>org.projectlombok</groupId>
+							<artifactId>lombok-mapstruct-binding</artifactId>
+							<version>${lombok.mapstruct.bind.version}</version>
+						</dependency>
+					</annotationProcessorPaths>
+					<compilerArgs>
+						<compilerArg>
+							-Amapstruct.defaultComponentModel=spring
+						</compilerArg>
+					</compilerArgs>
+				</configuration>
+			</plugin>
+		</plugins>
+	</build>
+
+</project>
Index: flat-service/.mvn/wrapper/maven-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/flat-service/.mvn/wrapper/maven-wrapper.properties b/flat-service/.mvn/wrapper/maven-wrapper.properties
new file mode 100644
--- /dev/null	(date 1714650035812)
+++ b/flat-service/.mvn/wrapper/maven-wrapper.properties	(date 1714650035812)
@@ -0,0 +1,2 @@
+distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.6/apache-maven-3.9.6-bin.zip
+wrapperUrl=https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar
Index: flat-service/src/main/java/com/micasa/FlatServiceApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/src/main/java/com/micasa/FlatServiceApplication.java b/flat-service/src/main/java/com/micasa/FlatServiceApplication.java
new file mode 100644
--- /dev/null	(date 1714650035814)
+++ b/flat-service/src/main/java/com/micasa/FlatServiceApplication.java	(date 1714650035814)
@@ -0,0 +1,13 @@
+package com.micasa;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
+@SpringBootApplication
+public class FlatServiceApplication {
+
+	public static void main(String[] args) {
+		SpringApplication.run(FlatServiceApplication.class, args);
+	}
+
+}
Index: flat-service/src/main/java/com/micasa/dto/SocietyDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/src/main/java/com/micasa/dto/SocietyDto.java b/flat-service/src/main/java/com/micasa/dto/SocietyDto.java
new file mode 100644
--- /dev/null	(date 1714650035816)
+++ b/flat-service/src/main/java/com/micasa/dto/SocietyDto.java	(date 1714650035816)
@@ -0,0 +1,17 @@
+package com.micasa.dto;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+public class SocietyDto
+{
+    private String societyId;
+    private String societyName;
+    private String address;
+}
Index: flat-service/src/main/java/com/micasa/dto/FlatDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/src/main/java/com/micasa/dto/FlatDto.java b/flat-service/src/main/java/com/micasa/dto/FlatDto.java
new file mode 100644
--- /dev/null	(date 1714650035816)
+++ b/flat-service/src/main/java/com/micasa/dto/FlatDto.java	(date 1714650035816)
@@ -0,0 +1,28 @@
+package com.micasa.dto;
+
+import jakarta.persistence.Column;
+import jakarta.validation.constraints.NotBlank;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+
+/**
+ * FlatDto class for user interaction.
+ */
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class FlatDto implements Serializable
+{
+    private String flatId;
+    @NotBlank(message = "flatNumber can not be blank")
+    @Column(name = "flat_number")
+    private String flatNumber;
+    @NotBlank(message = "flatBlock can not be blank.")
+    @Column(name = "flat_block")
+    private String flatBlock;
+    private boolean occupied;
+    private SocietyDto society;
+}
Index: flat-service/src/main/java/com/micasa/model/Society.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/src/main/java/com/micasa/model/Society.java b/flat-service/src/main/java/com/micasa/model/Society.java
new file mode 100644
--- /dev/null	(date 1714650035819)
+++ b/flat-service/src/main/java/com/micasa/model/Society.java	(date 1714650035819)
@@ -0,0 +1,27 @@
+package com.micasa.model;
+
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import java.util.List;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@AllArgsConstructor
+@Entity(name = "societies")
+public class Society
+{
+    @Id
+    @Column(name = "society_id")
+    private String societyId;
+    @Column(name = "society_name")
+    private String societyName;
+    private String address;
+
+    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
+    private List<Flat> flatList;
+}
Index: flat-service/src/main/java/com/micasa/model/Flat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/src/main/java/com/micasa/model/Flat.java b/flat-service/src/main/java/com/micasa/model/Flat.java
new file mode 100644
--- /dev/null	(date 1714650035819)
+++ b/flat-service/src/main/java/com/micasa/model/Flat.java	(date 1714650035819)
@@ -0,0 +1,42 @@
+package com.micasa.model;
+
+import jakarta.persistence.*;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.ToString;
+import org.hibernate.annotations.UuidGenerator;
+
+/**
+ * Model class for database operations.
+ */
+@Data
+@ToString
+@NoArgsConstructor
+@Entity(name = "flats")
+@Table(uniqueConstraints = {
+        @UniqueConstraint(columnNames = {"flat_number","flat_block"})
+})
+public class Flat
+{
+    @Id
+    @Column(name = "flat_id")
+    @UuidGenerator
+    private String flatId;
+    @Column(name = "flat_number")
+    private String flatNumber;
+    @Column(name = "flat_block")
+    private String flatBlock;
+    private boolean occupied;
+
+    @ManyToOne(fetch = FetchType.LAZY)
+    @JoinColumn(name = "society_id")
+    private Society society;
+
+    public Flat(String flatNumber, String flatBlock, boolean occupied, Society society)
+    {
+        this.flatNumber = flatNumber;
+        this.flatBlock = flatBlock;
+        this.occupied = occupied;
+        this.society = society;
+    }
+}
Index: flat-service/src/main/java/com/micasa/mapper/FlatMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/src/main/java/com/micasa/mapper/FlatMapper.java b/flat-service/src/main/java/com/micasa/mapper/FlatMapper.java
new file mode 100644
--- /dev/null	(date 1714650035818)
+++ b/flat-service/src/main/java/com/micasa/mapper/FlatMapper.java	(date 1714650035818)
@@ -0,0 +1,25 @@
+package com.micasa.mapper;
+
+import com.micasa.dto.FlatDto;
+import com.micasa.model.Flat;
+import org.mapstruct.Mapper;
+
+/**
+ * Mapper class for Flat and FlatDto.
+ */
+@Mapper(componentModel = "spring")
+public interface FlatMapper
+{
+    /**
+     * This function maps flatDto to flat.
+     * @param flatDto : FlatDto object.
+     * @return : Flat object.
+     */
+    Flat flatDtoToFlatEntity(FlatDto flatDto);
+    /**
+     * This function maps flat to flatDto.
+     * @param flat : Flat object.
+     * @return : FlatDto object.
+     */
+    FlatDto flatEntityToFlatDto(Flat flat);
+}
Index: flat-service/src/main/java/com/micasa/config/FlatServiceWebConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/src/main/java/com/micasa/config/FlatServiceWebConfig.java b/flat-service/src/main/java/com/micasa/config/FlatServiceWebConfig.java
new file mode 100644
--- /dev/null	(date 1714650035814)
+++ b/flat-service/src/main/java/com/micasa/config/FlatServiceWebConfig.java	(date 1714650035814)
@@ -0,0 +1,23 @@
+package com.micasa.config;
+
+import com.micasa.interceptor.LoggingRequestInterceptor;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
+
+/**
+ * Web configuration class for flatService.
+ */
+@Configuration
+public class FlatServiceWebConfig implements WebMvcConfigurer
+{
+    /**
+     * Adds a new request interceptor.
+     * @param registry : interceptorRegistry object.
+     */
+    @Override
+    public void addInterceptors(InterceptorRegistry registry)
+    {
+        registry.addInterceptor(new LoggingRequestInterceptor());
+    }
+}
Index: flat-service/src/main/java/com/micasa/service/FlatServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/src/main/java/com/micasa/service/FlatServiceImpl.java b/flat-service/src/main/java/com/micasa/service/FlatServiceImpl.java
new file mode 100644
--- /dev/null	(date 1714650035820)
+++ b/flat-service/src/main/java/com/micasa/service/FlatServiceImpl.java	(date 1714650035820)
@@ -0,0 +1,141 @@
+package com.micasa.service;
+
+import com.micasa.constants.ExceptionMessages;
+import com.micasa.dto.FlatDto;
+import com.micasa.exception.BadRequestException;
+import com.micasa.model.Flat;
+import com.micasa.repository.FlatRepository;
+import jakarta.transaction.Transactional;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+import java.util.Optional;
+
+/**
+ * Service class implementation for flatService.
+ * Methods:
+ *     1. addFlat(Flat); Add a new flat to database.
+ *     2. updateOccupiedStatus(String, boolean); Update occupied status of a flat
+ *     3. deleteFlatById(String); Delete a flat by flatId.
+ *     4. findFlatByFlatId(String); Find a flat by flatId.
+ *     5. findFlatByBlockNumber(String); Find a flat by block number.
+ *     6. findFlatByFlatNumber(String); Find a flat by flat number.
+ *     7. findFlatByBlockNumberAndFlatNumber(String, String); Find a flat by block number and flat number.
+ */
+@Slf4j
+@Service(value = "flatService")
+@Transactional
+public class FlatServiceImpl implements FlatService
+{
+    //Flat repository instance.
+    private final FlatRepository flatRepository;
+
+    @Autowired
+    public FlatServiceImpl(FlatRepository flatRepository)
+    {
+        this.flatRepository = flatRepository;
+    }
+
+    /**
+     * Function to add a new flat to database.
+     * Structure:
+     *  1. Take a flat
+     *  2. Save to database.
+     * @param flat : Flat object
+     * @return Saved Flat object.
+     */
+    @Override
+    public Flat addFlat(Flat flat)
+    {
+        Flat savedFlat = this.flatRepository.save(flat);
+        log.debug("Added new flat: {}", savedFlat);
+        return savedFlat;
+    }
+
+    /**
+     * Function to update occupied status of a flat.
+     * Structure:
+     *  1. Look for a flat with passed flatId
+     *      If found
+     *          1.1 Set new occupied status
+     *          1.2 Update in database.
+     *          1.3 Return updated flat.
+     *      Else
+     *          1.1 Throw BadRequestException
+     * @param flatId : FlatId for which occupied status has to be updated.
+     * @param occupiedStatus : This occupied status will be set.
+     * @return : updated flat object.
+     */
+    @Override
+    public Flat updateOccupiedStatus(String flatId, boolean occupiedStatus)
+    {
+        Flat flat = this.findFlatByFlatId(flatId);
+        flat.setOccupied(occupiedStatus);
+        flat = this.flatRepository.save(flat);
+        log.info("Flat with flatId: {} updated with occupied status: {}", flatId, occupiedStatus);
+        return flat;
+    }
+
+    /**
+     * Function to delete a flat by flatId.
+     * Structure:
+     *  1. Look for flat with passed flatId.
+     *      If found
+     *          1.1 Delete the flat.
+     *      Else
+     *          1.1 Throw BadRequestException.
+     * @param flatId : Flat with this flatId will be deleted.
+     */
+    @Override
+    public void deleteFlatById(String flatId)
+    {
+        Flat flat = this.findFlatByFlatId(flatId);
+        this.flatRepository.delete(flat);
+        log.info("Flat with flatId: {} deleted", flatId);
+    }
+
+    /**
+     * Function to find a flat by flatId.
+     * Structure:
+     *  1. Look for a flat with passed flatId
+     *      If found
+     *          1.1 Return updated flat.
+     *      Else
+     *          1.1 Throw BadRequestException
+     * @param flatId : Search for flat with this flatId.
+     * @return : Found flat object.
+     */
+    @Override
+    public Flat findFlatByFlatId(String flatId)
+    {
+        Optional<Flat> flatOptional = this.flatRepository.findById(flatId);
+        Flat flat = flatOptional.orElseThrow(() -> {
+            log.error("Flat not found with flat Id: {}", flatId);
+            return BadRequestException.builder()
+                    .message(ExceptionMessages.NO_RECORD_PRESENT_MSG)
+                    .fieldValue(flatId)
+                    .timestamp(System.currentTimeMillis())
+                    .build();
+        });
+        log.debug("Flat with id: {} found", flatId);
+        return flat;
+    }
+
+    @Override
+    public List<Flat> findFlatByBlockNumber(String blockNumber)
+    {
+        return List.of();
+    }
+
+    @Override
+    public List<Flat> findFlatByFlatNumber(String flatNumber) {
+        return List.of();
+    }
+
+    @Override
+    public Flat findFlatByBlockNumberAndFlatNumber(String blockNumber, String flatNumber) {
+        return null;
+    }
+}
Index: flat-service/src/main/java/com/micasa/service/FlatService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/src/main/java/com/micasa/service/FlatService.java b/flat-service/src/main/java/com/micasa/service/FlatService.java
new file mode 100644
--- /dev/null	(date 1714650035820)
+++ b/flat-service/src/main/java/com/micasa/service/FlatService.java	(date 1714650035820)
@@ -0,0 +1,16 @@
+package com.micasa.service;
+
+import com.micasa.model.Flat;
+
+import java.util.List;
+
+public interface FlatService
+{
+    Flat addFlat(Flat flat);
+    Flat updateOccupiedStatus(String flatId, boolean occupiedStatus);
+    void deleteFlatById(String flatId);
+    Flat findFlatByFlatId(String flatId);
+    List<Flat> findFlatByBlockNumber(String blockNumber);
+    List<Flat> findFlatByFlatNumber(String flatNumber);
+    Flat findFlatByBlockNumberAndFlatNumber(String blockNumber, String flatNumber);
+}
Index: flat-service/src/main/java/com/micasa/constants/ExceptionMessages.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/src/main/java/com/micasa/constants/ExceptionMessages.java b/flat-service/src/main/java/com/micasa/constants/ExceptionMessages.java
new file mode 100644
--- /dev/null	(date 1714650035815)
+++ b/flat-service/src/main/java/com/micasa/constants/ExceptionMessages.java	(date 1714650035815)
@@ -0,0 +1,11 @@
+package com.micasa.constants;
+
+/**
+ * Exception constants for flat-service.
+ */
+public class ExceptionMessages
+{
+    public static String NO_RECORD_PRESENT_MSG = "No record present with id: ";
+
+    private ExceptionMessages() {}
+}
Index: flat-service/src/main/java/com/micasa/constants/CommonConstants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/src/main/java/com/micasa/constants/CommonConstants.java b/flat-service/src/main/java/com/micasa/constants/CommonConstants.java
new file mode 100644
--- /dev/null	(date 1714650035815)
+++ b/flat-service/src/main/java/com/micasa/constants/CommonConstants.java	(date 1714650035815)
@@ -0,0 +1,11 @@
+package com.micasa.constants;
+
+/**
+ * Common constants for flat-service.
+ */
+public class CommonConstants
+{
+    public static String CORRELATION_ID_HEADER = "correlationId";
+
+    private CommonConstants() {}
+}
Index: flat-service/src/main/java/com/micasa/exception/ExceptionModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/src/main/java/com/micasa/exception/ExceptionModel.java b/flat-service/src/main/java/com/micasa/exception/ExceptionModel.java
new file mode 100644
--- /dev/null	(date 1714650035817)
+++ b/flat-service/src/main/java/com/micasa/exception/ExceptionModel.java	(date 1714650035817)
@@ -0,0 +1,21 @@
+package com.micasa.exception;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ * Exception model format.
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class ExceptionModel
+{
+    private String message;
+    private long timestamp;
+    private String fieldName;
+    private String moreInfo;
+}
Index: flat-service/src/main/java/com/micasa/exception/BadRequestException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/src/main/java/com/micasa/exception/BadRequestException.java b/flat-service/src/main/java/com/micasa/exception/BadRequestException.java
new file mode 100644
--- /dev/null	(date 1714650035817)
+++ b/flat-service/src/main/java/com/micasa/exception/BadRequestException.java	(date 1714650035817)
@@ -0,0 +1,20 @@
+package com.micasa.exception;
+
+import lombok.*;
+
+/**
+ * BadRequestException class.
+ */
+@Getter
+@Setter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class BadRequestException extends RuntimeException
+{
+    private String message;
+    private long timestamp;
+    private String fieldValue;
+    private String fieldName;
+    private String moreInfo;
+}
Index: flat-service/src/main/java/com/micasa/controller/FlatController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/src/main/java/com/micasa/controller/FlatController.java b/flat-service/src/main/java/com/micasa/controller/FlatController.java
new file mode 100644
--- /dev/null	(date 1714650035815)
+++ b/flat-service/src/main/java/com/micasa/controller/FlatController.java	(date 1714650035815)
@@ -0,0 +1,108 @@
+package com.micasa.controller;
+
+import com.micasa.dto.FlatDto;
+import com.micasa.mapper.FlatMapper;
+import com.micasa.model.Flat;
+import com.micasa.service.FlatService;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+/**
+ * Controller layer to expose endpoints for flat-service.
+ * Methods:
+ *  1. addFlat(FlatDto) : Add a new flat to database.
+ *  2. findFlatById(String) : Look for a flat with flatId.
+ *  3. updateOccupiedStatus(String, boolean) : Update occupied status of a flat.
+ *  4.
+ */
+@Slf4j
+@RestController
+public class FlatController
+{
+    //FlatService instance.
+    private final FlatService flatService;
+    //FlatMapper instance.
+    private final FlatMapper flatMapper;
+
+    @Autowired
+    public FlatController(FlatService flatService, FlatMapper flatMapper)
+    {
+        this.flatService = flatService;
+        this.flatMapper = flatMapper;
+    }
+
+    /**
+     * Function to add a new flat to database.
+     * Structure:
+     *  1. Take a flatDto
+     *  2. Map flatDto to flat.
+     *  3. Use to save flat.
+     *  4. Map flat to FlatDto.
+     *  5. Return saved flatDto.
+     * @param flatDto : Flat to save in database.
+     * @return : saved flatDto, HttpStatus 201.
+     */
+    @PostMapping(value = "/add/flat")
+    public ResponseEntity<FlatDto> addFlat(@RequestBody  FlatDto flatDto)
+    {
+        log.info("Received request to add a new flat");
+        Flat flat = this.flatMapper.flatDtoToFlatEntity(flatDto);
+        Flat savedFlat = this.flatService.addFlat(flat);
+        FlatDto flatDtoSaved = this.flatMapper.flatEntityToFlatDto(savedFlat);
+        return ResponseEntity.status(HttpStatus.CREATED).body(flatDtoSaved);
+    }
+
+    /**
+     * Function to find a flat by using flatId.
+     * Structure:
+     *  1. Use flatService to look for a flat with passed flatId.
+     *  2. Return flatDto of the found flat.
+     * @param flatId : Look for flat with this flatId.
+     * @return : flatDto of the flat found, HttpStatus 200.
+     */
+    @GetMapping("/find/flatId/{flatId}")
+    public ResponseEntity<FlatDto> findFlatById(@PathVariable String flatId)
+    {
+        log.info("Received request to find a flat with id {}", flatId);
+        Flat flat = this.flatService.findFlatByFlatId(flatId);
+        FlatDto flatDto = this.flatMapper.flatEntityToFlatDto(flat);
+        return ResponseEntity.status(HttpStatus.OK).body(flatDto);
+    }
+
+    /**
+     * Function to update occupied status of a flat.
+     * Structure:
+     *  1. Use flatService to update occupied status.
+     *  2. Return flatDto of updated flat.
+     * @param flatId : FlatId for which occupied status will be updated.
+     * @param occupiedStatus : This occupied status will be set.
+     * @return : updated flatDto, HttpStatus 200.
+     */
+    @PatchMapping("/update/occupied-status/{flatId}/{occupiedStatus}")
+    public ResponseEntity<FlatDto> updateOccupiedStatus(@PathVariable String flatId, @PathVariable boolean occupiedStatus)
+    {
+        log.info("Received request to update occupied status to {}, of flat with id {}",occupiedStatus, flatId);
+        Flat flat = this.flatService.updateOccupiedStatus(flatId,occupiedStatus);
+        FlatDto flatDto = this.flatMapper.flatEntityToFlatDto(flat);
+        return ResponseEntity.status(HttpStatus.OK).body(flatDto);
+    }
+
+    /**
+     * Function to delete a flat with flatId.
+     * Structure:
+     *  1. Use flatService to delete flat.
+     *  2. Return response.
+     * @param flatId : Flat with this flatId will be deleted.
+     * @return : response, HttpStatus 204.
+     */
+    @DeleteMapping("/delete/flat/{flatId}")
+    public ResponseEntity<Void> deleteFlatByFlatId(@PathVariable String flatId)
+    {
+        log.info("Received request to delete a flat with id {}", flatId);
+        this.flatService.deleteFlatById(flatId);
+        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
+    }
+}
Index: flat-service/src/main/java/com/micasa/exception/ExceptionResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/src/main/java/com/micasa/exception/ExceptionResponse.java b/flat-service/src/main/java/com/micasa/exception/ExceptionResponse.java
new file mode 100644
--- /dev/null	(date 1714650035817)
+++ b/flat-service/src/main/java/com/micasa/exception/ExceptionResponse.java	(date 1714650035817)
@@ -0,0 +1,16 @@
+package com.micasa.exception;
+
+import lombok.*;
+
+/**
+ * Exception response that will be sent in case of exception.
+ */
+@Getter
+@Setter
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class ExceptionResponse
+{
+    Iterable<ExceptionModel> exceptionResponse;
+}
Index: flat-service/src/main/java/com/micasa/repository/FlatRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/src/main/java/com/micasa/repository/FlatRepository.java b/flat-service/src/main/java/com/micasa/repository/FlatRepository.java
new file mode 100644
--- /dev/null	(date 1714650035820)
+++ b/flat-service/src/main/java/com/micasa/repository/FlatRepository.java	(date 1714650035820)
@@ -0,0 +1,38 @@
+package com.micasa.repository;
+
+import com.micasa.model.Flat;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Modifying;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.stereotype.Repository;
+
+import java.util.List;
+import java.util.Optional;
+
+/**
+ * Repository to interact with database for database queries related to flat.
+ */
+@Repository(value = "flatRepository")
+public interface FlatRepository extends JpaRepository<Flat, String>
+{
+    /**
+     * This function finds all flat with passed flat number and returns in descending order wrt flatBlock.
+     * @param flatNumber : FlatNumber for which flats will be searched.
+     * @return : List of found flats.
+     */
+    Optional<List<Flat>> findByFlatNumberOrderByFlatBlockDesc(String flatNumber);
+    /**
+     * This function finds all flat with passed flat block and returns in descending order wrt flatNumber.
+     * @param flatBlock : FlatBlock for which flats will be searched.
+     * @return : List of found flats.
+     */
+    Optional<List<Flat>> findByFlatBlockOrderByFlatNumberDesc(String flatBlock);
+
+    /**
+     * This flat finds a flat with passed flatNumber and flatBlock.
+     * @param flatNumber : FlatNumber for which flat will be searched.
+     * @param flatBlock : FlatBlock for which flat will be searched.
+     * @return : Found flat.
+     */
+    Optional<Flat> findByFlatNumberAndFlatBlock(String flatNumber, String flatBlock);
+}
Index: flat-service/src/main/java/com/micasa/controller/FlatExceptionController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/src/main/java/com/micasa/controller/FlatExceptionController.java b/flat-service/src/main/java/com/micasa/controller/FlatExceptionController.java
new file mode 100644
--- /dev/null	(date 1714650035816)
+++ b/flat-service/src/main/java/com/micasa/controller/FlatExceptionController.java	(date 1714650035816)
@@ -0,0 +1,41 @@
+package com.micasa.controller;
+
+import com.micasa.exception.BadRequestException;
+import com.micasa.exception.ExceptionModel;
+import com.micasa.exception.ExceptionResponse;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.ControllerAdvice;
+import org.springframework.web.bind.annotation.ExceptionHandler;
+
+import java.util.List;
+
+/**
+ * Global exception handler.
+ */
+@ControllerAdvice
+public class FlatExceptionController
+{
+    /**
+     * Exception handler to handle BadRequestException
+     * Structure:
+     *  1. Build exceptionModel with badRequestException object.
+     *  2. Build a exceptionResponse.
+     *  3. Build a responseEntity.
+     *  4. Return responseEntity, HttpStatus: 400;
+     * @param badRequestException : Exception object.
+     * @return : ResponseEntity with status 400.
+     */
+    @ExceptionHandler(BadRequestException.class)
+    public ResponseEntity<ExceptionResponse> handleBadRequestException(BadRequestException badRequestException)
+    {
+        ExceptionModel exceptionModel = ExceptionModel.builder()
+                .fieldName(badRequestException.getFieldName())
+                .message(badRequestException.getMessage().concat(badRequestException.getFieldValue()))
+                .timestamp(badRequestException.getTimestamp())
+                .moreInfo(badRequestException.getMoreInfo())
+                .build();
+        ExceptionResponse exceptionResponse = ExceptionResponse.builder()
+                .exceptionResponse(List.of(exceptionModel)).build();
+        return ResponseEntity.badRequest().body(exceptionResponse);
+    }
+}
Index: flat-service/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/flat-service/src/main/resources/application.properties b/flat-service/src/main/resources/application.properties
new file mode 100644
--- /dev/null	(date 1714650056458)
+++ b/flat-service/src/main/resources/application.properties	(date 1714650056458)
@@ -0,0 +1,15 @@
+#spring.profiles.active=dev
+
+#---------------Application Configuration--------------------------------------------------------------------------------
+spring.application.name=flat-service
+server.port=8080
+
+#---------------Database Configuration----------------------------------------------------------------------------------
+spring.jpa.generate-ddl=true
+spring.jpa.hibernate.ddl-auto=update
+spring.datasource.url=jdbc:mysql://localhost:3306/micasa
+spring.datasource.username=root
+spring.datasource.password=password
+
+#---------------Logging Configuration-----------------------------------------------------------------------------------
+application.log.level=INFO
\ No newline at end of file
Index: flat-service/src/main/java/com/micasa/interceptor/LoggingRequestInterceptor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/src/main/java/com/micasa/interceptor/LoggingRequestInterceptor.java b/flat-service/src/main/java/com/micasa/interceptor/LoggingRequestInterceptor.java
new file mode 100644
--- /dev/null	(date 1714650035818)
+++ b/flat-service/src/main/java/com/micasa/interceptor/LoggingRequestInterceptor.java	(date 1714650035818)
@@ -0,0 +1,77 @@
+package com.micasa.interceptor;
+
+import com.micasa.constants.CommonConstants;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
+import lombok.extern.slf4j.Slf4j;
+import org.slf4j.MDC;
+import org.springframework.web.servlet.HandlerInterceptor;
+import org.springframework.web.servlet.ModelAndView;
+
+import java.util.UUID;
+
+/**
+ * This class intercepts each request and sets correlationId to logs.
+ */
+@Slf4j
+public class LoggingRequestInterceptor implements HandlerInterceptor
+{
+    //Variable name that will be used in logs.
+    private static final String CORRELATION_ID_LOG_VAR_NAME = "correlationId";
+
+    /**
+     * This intercepts request before handling.
+     * Structure:
+     *  1. Look for correlationId header.
+     *      If present
+     *          1.1 Set in logs against CORRELATION_ID_LOG_VAR_NAME.
+     *      Else
+     *          1.1 Generate new correlationId.
+     *          1.2 Set in logs against CORRELATION_ID_LOG_VAR_NAME.
+     * @param request : request object.
+     * @param response : response object.
+     * @param handler : handler object.
+     * @return : true/false
+     * @throws Exception : Exception
+     */
+    @Override
+    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception
+    {
+        String correlationId = request.getHeader(CommonConstants.CORRELATION_ID_HEADER);
+        if(null == correlationId)
+        {
+            correlationId = UUID.randomUUID().toString();
+            log.info("No correlation-id present in headers, generated new correlation-id: {}",correlationId);
+        }
+        MDC.put(CORRELATION_ID_LOG_VAR_NAME, correlationId);
+        return HandlerInterceptor.super.preHandle(request, response, handler);
+    }
+
+    /**
+     * Perform some operation after request handling is done.
+     * @param request : request object.
+     * @param response : response object.
+     * @param handler : handler object.
+     * @param modelAndView : model/view.
+     * @throws Exception : Exception
+     */
+    @Override
+    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception
+    {
+        HandlerInterceptor.super.postHandle(request, response, handler, modelAndView);
+    }
+
+    /**
+     * Perform operation after response is sent.
+     * @param request : request object.
+     * @param response : response object.
+     * @param handler : handler object.
+     * @param ex : exception object.
+     * @throws Exception : Exception.
+     */
+    @Override
+    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception
+    {
+        HandlerInterceptor.super.afterCompletion(request, response, handler, ex);
+    }
+}
Index: flat-service/src/main/resources/application-dev.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/flat-service/src/main/resources/application-dev.properties b/flat-service/src/main/resources/application-dev.properties
new file mode 100644
--- /dev/null	(date 1714650035821)
+++ b/flat-service/src/main/resources/application-dev.properties	(date 1714650035821)
@@ -0,0 +1,16 @@
+#---------------Application Configuration-------------------------------------------------------------------------------
+spring.application.name=flat-service-dev
+server.port=8080
+
+#---------------Database Configuration----------------------------------------------------------------------------------
+spring.jpa.generate-ddl=true
+spring.jpa.hibernate.ddl-auto=update
+spring.datasource.url=jdbc:mysql://localhost:3306/micasa
+spring.datasource.username=root
+spring.datasource.password=password
+spring.jpa.show-sql=true
+spring.jpa.properties.hibernate.format_sql=true
+
+#---------------Logging Configuration-----------------------------------------------------------------------------------
+application.log.level=DEBUG
+
Index: flat-service/src/main/resources/logback-spring.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/src/main/resources/logback-spring.xml b/flat-service/src/main/resources/logback-spring.xml
new file mode 100644
--- /dev/null	(date 1714650035821)
+++ b/flat-service/src/main/resources/logback-spring.xml	(date 1714650035821)
@@ -0,0 +1,32 @@
+<configuration>
+    <springProperty scope="context" name="appName" source="spring.application.name"/>
+    <springProperty scope="context" name="logLevel" source="application.log.level"/>
+    <appender name = "myConsoleAppender" class="ch.qos.logback.core.ConsoleAppender">
+        <encoder>
+            <pattern>
+                {"X-Correlation-ID":"%X{correlationId}", "level": "%level","service": "${appName}", "thread": "%thread", "class": "%logger{40}","message": "%message"}%n
+            </pattern>
+        </encoder>
+    </appender>
+<!-- Use for logging in file
+    <appender name = "myFileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
+        <file>
+            ${appName}.log
+        </file>
+        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
+            <fileNamePattern>${appName}-%d{yy-MM-dd_HH-mm}.%i.log</fileNamePattern>
+            <maxFileSize>10MB</maxFileSize>
+            <maxHistory>10</maxHistory>
+        </rollingPolicy>
+        <encoder>
+            <pattern>
+                {"X-Correlation-ID":"%X{correlationId}", "level": "%level","service": "${appName}", "thread": "%thread", "class": "%logger{40}","message": "%message"}%n
+            </pattern>
+        </encoder>
+    </appender>
+-->
+    <root level="${logLevel}">
+        <appender-ref ref="myConsoleAppender" />
+<!--        <appender-ref ref="myFileAppender" /> -->
+    </root>
+</configuration>
\ No newline at end of file
Index: flat-service/src/test/java/com/micasa/FlatServiceApplicationTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/src/test/java/com/micasa/FlatServiceApplicationTests.java b/flat-service/src/test/java/com/micasa/FlatServiceApplicationTests.java
new file mode 100644
--- /dev/null	(date 1714650035822)
+++ b/flat-service/src/test/java/com/micasa/FlatServiceApplicationTests.java	(date 1714650035822)
@@ -0,0 +1,13 @@
+package com.micasa;
+
+import org.junit.jupiter.api.Test;
+import org.springframework.boot.test.context.SpringBootTest;
+
+@SpringBootTest
+class FlatServiceApplicationTests {
+
+	@Test
+	void contextLoads() {
+	}
+
+}
Index: flat-service/mvnw
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flat-service/mvnw b/flat-service/mvnw
new file mode 100644
--- /dev/null	(date 1714650035813)
+++ b/flat-service/mvnw	(date 1714650035813)
@@ -0,0 +1,308 @@
+#!/bin/sh
+# ----------------------------------------------------------------------------
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#    https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+# ----------------------------------------------------------------------------
+
+# ----------------------------------------------------------------------------
+# Apache Maven Wrapper startup batch script, version 3.2.0
+#
+# Required ENV vars:
+# ------------------
+#   JAVA_HOME - location of a JDK home dir
+#
+# Optional ENV vars
+# -----------------
+#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
+#     e.g. to debug Maven itself, use
+#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
+#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
+# ----------------------------------------------------------------------------
+
+if [ -z "$MAVEN_SKIP_RC" ] ; then
+
+  if [ -f /usr/local/etc/mavenrc ] ; then
+    . /usr/local/etc/mavenrc
+  fi
+
+  if [ -f /etc/mavenrc ] ; then
+    . /etc/mavenrc
+  fi
+
+  if [ -f "$HOME/.mavenrc" ] ; then
+    . "$HOME/.mavenrc"
+  fi
+
+fi
+
+# OS specific support.  $var _must_ be set to either true or false.
+cygwin=false;
+darwin=false;
+mingw=false
+case "$(uname)" in
+  CYGWIN*) cygwin=true ;;
+  MINGW*) mingw=true;;
+  Darwin*) darwin=true
+    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
+    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
+    if [ -z "$JAVA_HOME" ]; then
+      if [ -x "/usr/libexec/java_home" ]; then
+        JAVA_HOME="$(/usr/libexec/java_home)"; export JAVA_HOME
+      else
+        JAVA_HOME="/Library/Java/Home"; export JAVA_HOME
+      fi
+    fi
+    ;;
+esac
+
+if [ -z "$JAVA_HOME" ] ; then
+  if [ -r /etc/gentoo-release ] ; then
+    JAVA_HOME=$(java-config --jre-home)
+  fi
+fi
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched
+if $cygwin ; then
+  [ -n "$JAVA_HOME" ] &&
+    JAVA_HOME=$(cygpath --unix "$JAVA_HOME")
+  [ -n "$CLASSPATH" ] &&
+    CLASSPATH=$(cygpath --path --unix "$CLASSPATH")
+fi
+
+# For Mingw, ensure paths are in UNIX format before anything is touched
+if $mingw ; then
+  [ -n "$JAVA_HOME" ] && [ -d "$JAVA_HOME" ] &&
+    JAVA_HOME="$(cd "$JAVA_HOME" || (echo "cannot cd into $JAVA_HOME."; exit 1); pwd)"
+fi
+
+if [ -z "$JAVA_HOME" ]; then
+  javaExecutable="$(which javac)"
+  if [ -n "$javaExecutable" ] && ! [ "$(expr "\"$javaExecutable\"" : '\([^ ]*\)')" = "no" ]; then
+    # readlink(1) is not available as standard on Solaris 10.
+    readLink=$(which readlink)
+    if [ ! "$(expr "$readLink" : '\([^ ]*\)')" = "no" ]; then
+      if $darwin ; then
+        javaHome="$(dirname "\"$javaExecutable\"")"
+        javaExecutable="$(cd "\"$javaHome\"" && pwd -P)/javac"
+      else
+        javaExecutable="$(readlink -f "\"$javaExecutable\"")"
+      fi
+      javaHome="$(dirname "\"$javaExecutable\"")"
+      javaHome=$(expr "$javaHome" : '\(.*\)/bin')
+      JAVA_HOME="$javaHome"
+      export JAVA_HOME
+    fi
+  fi
+fi
+
+if [ -z "$JAVACMD" ] ; then
+  if [ -n "$JAVA_HOME"  ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+      # IBM's JDK on AIX uses strange locations for the executables
+      JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+      JAVACMD="$JAVA_HOME/bin/java"
+    fi
+  else
+    JAVACMD="$(\unset -f command 2>/dev/null; \command -v java)"
+  fi
+fi
+
+if [ ! -x "$JAVACMD" ] ; then
+  echo "Error: JAVA_HOME is not defined correctly." >&2
+  echo "  We cannot execute $JAVACMD" >&2
+  exit 1
+fi
+
+if [ -z "$JAVA_HOME" ] ; then
+  echo "Warning: JAVA_HOME environment variable is not set."
+fi
+
+# traverses directory structure from process work directory to filesystem root
+# first directory with .mvn subdirectory is considered project base directory
+find_maven_basedir() {
+  if [ -z "$1" ]
+  then
+    echo "Path not specified to find_maven_basedir"
+    return 1
+  fi
+
+  basedir="$1"
+  wdir="$1"
+  while [ "$wdir" != '/' ] ; do
+    if [ -d "$wdir"/.mvn ] ; then
+      basedir=$wdir
+      break
+    fi
+    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
+    if [ -d "${wdir}" ]; then
+      wdir=$(cd "$wdir/.." || exit 1; pwd)
+    fi
+    # end of workaround
+  done
+  printf '%s' "$(cd "$basedir" || exit 1; pwd)"
+}
+
+# concatenates all lines of a file
+concat_lines() {
+  if [ -f "$1" ]; then
+    # Remove \r in case we run on Windows within Git Bash
+    # and check out the repository with auto CRLF management
+    # enabled. Otherwise, we may read lines that are delimited with
+    # \r\n and produce $'-Xarg\r' rather than -Xarg due to word
+    # splitting rules.
+    tr -s '\r\n' ' ' < "$1"
+  fi
+}
+
+log() {
+  if [ "$MVNW_VERBOSE" = true ]; then
+    printf '%s\n' "$1"
+  fi
+}
+
+BASE_DIR=$(find_maven_basedir "$(dirname "$0")")
+if [ -z "$BASE_DIR" ]; then
+  exit 1;
+fi
+
+MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-"$BASE_DIR"}; export MAVEN_PROJECTBASEDIR
+log "$MAVEN_PROJECTBASEDIR"
+
+##########################################################################################
+# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
+# This allows using the maven wrapper in projects that prohibit checking in binary data.
+##########################################################################################
+wrapperJarPath="$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar"
+if [ -r "$wrapperJarPath" ]; then
+    log "Found $wrapperJarPath"
+else
+    log "Couldn't find $wrapperJarPath, downloading it ..."
+
+    if [ -n "$MVNW_REPOURL" ]; then
+      wrapperUrl="$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar"
+    else
+      wrapperUrl="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar"
+    fi
+    while IFS="=" read -r key value; do
+      # Remove '\r' from value to allow usage on windows as IFS does not consider '\r' as a separator ( considers space, tab, new line ('\n'), and custom '=' )
+      safeValue=$(echo "$value" | tr -d '\r')
+      case "$key" in (wrapperUrl) wrapperUrl="$safeValue"; break ;;
+      esac
+    done < "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties"
+    log "Downloading from: $wrapperUrl"
+
+    if $cygwin; then
+      wrapperJarPath=$(cygpath --path --windows "$wrapperJarPath")
+    fi
+
+    if command -v wget > /dev/null; then
+        log "Found wget ... using wget"
+        [ "$MVNW_VERBOSE" = true ] && QUIET="" || QUIET="--quiet"
+        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
+            wget $QUIET "$wrapperUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
+        else
+            wget $QUIET --http-user="$MVNW_USERNAME" --http-password="$MVNW_PASSWORD" "$wrapperUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
+        fi
+    elif command -v curl > /dev/null; then
+        log "Found curl ... using curl"
+        [ "$MVNW_VERBOSE" = true ] && QUIET="" || QUIET="--silent"
+        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
+            curl $QUIET -o "$wrapperJarPath" "$wrapperUrl" -f -L || rm -f "$wrapperJarPath"
+        else
+            curl $QUIET --user "$MVNW_USERNAME:$MVNW_PASSWORD" -o "$wrapperJarPath" "$wrapperUrl" -f -L || rm -f "$wrapperJarPath"
+        fi
+    else
+        log "Falling back to using Java to download"
+        javaSource="$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.java"
+        javaClass="$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.class"
+        # For Cygwin, switch paths to Windows format before running javac
+        if $cygwin; then
+          javaSource=$(cygpath --path --windows "$javaSource")
+          javaClass=$(cygpath --path --windows "$javaClass")
+        fi
+        if [ -e "$javaSource" ]; then
+            if [ ! -e "$javaClass" ]; then
+                log " - Compiling MavenWrapperDownloader.java ..."
+                ("$JAVA_HOME/bin/javac" "$javaSource")
+            fi
+            if [ -e "$javaClass" ]; then
+                log " - Running MavenWrapperDownloader.java ..."
+                ("$JAVA_HOME/bin/java" -cp .mvn/wrapper MavenWrapperDownloader "$wrapperUrl" "$wrapperJarPath") || rm -f "$wrapperJarPath"
+            fi
+        fi
+    fi
+fi
+##########################################################################################
+# End of extension
+##########################################################################################
+
+# If specified, validate the SHA-256 sum of the Maven wrapper jar file
+wrapperSha256Sum=""
+while IFS="=" read -r key value; do
+  case "$key" in (wrapperSha256Sum) wrapperSha256Sum=$value; break ;;
+  esac
+done < "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties"
+if [ -n "$wrapperSha256Sum" ]; then
+  wrapperSha256Result=false
+  if command -v sha256sum > /dev/null; then
+    if echo "$wrapperSha256Sum  $wrapperJarPath" | sha256sum -c > /dev/null 2>&1; then
+      wrapperSha256Result=true
+    fi
+  elif command -v shasum > /dev/null; then
+    if echo "$wrapperSha256Sum  $wrapperJarPath" | shasum -a 256 -c > /dev/null 2>&1; then
+      wrapperSha256Result=true
+    fi
+  else
+    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available."
+    echo "Please install either command, or disable validation by removing 'wrapperSha256Sum' from your maven-wrapper.properties."
+    exit 1
+  fi
+  if [ $wrapperSha256Result = false ]; then
+    echo "Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised." >&2
+    echo "Investigate or delete $wrapperJarPath to attempt a clean download." >&2
+    echo "If you updated your Maven version, you need to update the specified wrapperSha256Sum property." >&2
+    exit 1
+  fi
+fi
+
+MAVEN_OPTS="$(concat_lines "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config") $MAVEN_OPTS"
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin; then
+  [ -n "$JAVA_HOME" ] &&
+    JAVA_HOME=$(cygpath --path --windows "$JAVA_HOME")
+  [ -n "$CLASSPATH" ] &&
+    CLASSPATH=$(cygpath --path --windows "$CLASSPATH")
+  [ -n "$MAVEN_PROJECTBASEDIR" ] &&
+    MAVEN_PROJECTBASEDIR=$(cygpath --path --windows "$MAVEN_PROJECTBASEDIR")
+fi
+
+# Provide a "standardized" way to retrieve the CLI args that will
+# work with both Windows and non-Windows executions.
+MAVEN_CMD_LINE_ARGS="$MAVEN_CONFIG $*"
+export MAVEN_CMD_LINE_ARGS
+
+WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
+
+# shellcheck disable=SC2086 # safe args
+exec "$JAVACMD" \
+  $MAVEN_OPTS \
+  $MAVEN_DEBUG_OPTS \
+  -classpath "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar" \
+  "-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}" \
+  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG "$@"
